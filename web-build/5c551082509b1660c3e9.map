{"version":3,"sources":["/Users/hoang/Projects/DirectoryController/App.tsx","/Users/hoang/Projects/DirectoryController/web-build/register-service-worker.js"],"names":["Platform","OS","window","require","RTCPeerConnection","RTCIceCandidate","RTCSessionDescription","notify","MediaStream","MediaStreamTrack","title","message","alert","Alert","App","pc","useRef","socket","useEffect","current","iceServers","url","onicecandidate","event","console","log","emit","candidate","SocketIOClient","on","peers","sdp","type","remoteDecription","setRemoteDescription","catch","error","iceCandidate","addIceCandidate","busy","then","createAnswer","answer","style","styles","container","hidden","width","height","backgroundColor","position","marginTop","onPress","createOffer","offer","setLocalDescription","StyleSheet","create","flex","justifyContent","flexDirection","navigator","addEventListener","serviceWorker","register","scope","info"],"mappings":"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","file":"static/js/app.d23a96df.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Platform,\n  Alert,\n  Button,\n  StatusBar\n} from \"react-native\";\nimport SocketIOClient from \"socket.io-client\";\nconst {\n  RTCPeerConnection,\n  RTCIceCandidate,\n  RTCSessionDescription,\n  MediaStream,\n  MediaStreamTrack\n} = Platform.OS === \"web\" ? window : require(\"react-native-webrtc\");\n\nconst notify = (title: string, message?: string) => {\n  if (Platform.OS === \"web\") {\n    alert(title);\n  } else {\n    Alert.alert(title);\n  }\n};\n\nexport default function App() {\n  let pc = useRef<RTCPeerConnection | null>(null);\n  let socket = useRef<SocketIOClient.Socket | null>(null);\n\n  const makeOffer = () => {\n    if (pc.current) {\n      console.log(\"make offer\");\n      pc.current.createOffer().then(offer => {\n        pc.current.setLocalDescription(offer).then(() => {\n          socket.current.emit(\"MAKE_OFFER\", offer);\n        });\n      });\n    } else {\n      notify(\"Can not connect to Directory, please connect to the same wifi\");\n    }\n  };\n\n  useEffect(() => {\n    pc.current = new RTCPeerConnection({\n      iceServers: [{ url: \"stun:stun.l.google.com:19302\" }]\n    });\n\n    pc.current.onicecandidate = event => {\n      console.log(\"on iceeeee\");\n      socket.current.emit(\"data\", event.candidate);\n    };\n\n    socket.current = SocketIOClient(\"http://192.168.48.27:3000\");\n\n    socket.current.on(\"PEERS_LIST\", peers => {\n      console.log(\"list peers: \", peers);\n    });\n\n    socket.current.on(\"DIRECTORY_BUSY\", () => {\n      notify(\"Directory is currently in use\");\n    });\n\n    socket.current.on(\"data\", message => {\n      console.log(\"message\", message);\n      if (message.sdp) {\n        if (message.type === \"answer\") {\n          const remoteDecription = new RTCSessionDescription(message);\n          pc.current\n            .setRemoteDescription(remoteDecription)\n            .catch(error => console.error(error));\n        }\n      } else if (message.candidate) {\n        const iceCandidate = new RTCIceCandidate(RTCIceCandidate);\n        pc.current.addIceCandidate(iceCandidate);\n        console.log(\"browser added ice candidate: \", iceCandidate);\n      }\n    });\n\n    // if is directory\n    if (Platform.OS === \"android\") {\n      socket.current.emit(\"SET_DIRECTORY\", {\n        busy: false\n      });\n      socket.current.on(\"data\", message => {\n        // notify(JSON.stringify(message));\n        console.log(\"message\", message);\n        if (message.sdp) {\n          if (message.type === \"offer\") {\n            console.log(\"answer offer\");\n            const remoteDecription = new RTCSessionDescription(message);\n            pc.current\n              .setRemoteDescription(remoteDecription)\n              .then(() => {\n                pc.current.createAnswer().then(answer => {\n                  console.log(\"answer: \", answer);\n                  socket.current.emit(\"MAKE_ANSWER\", answer);\n                });\n              })\n              .catch(error => console.error(error));\n          }\n        } else if (message.candidate) {\n          const iceCandidate = new RTCIceCandidate(RTCIceCandidate);\n          pc.current.addIceCandidate(iceCandidate);\n          console.log(\"android added candidate: \", iceCandidate);\n        }\n      });\n    }\n\n    return () => {};\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <StatusBar hidden={true} />\n      <View\n        style={{ width: \"40%\", height: \"100%\", backgroundColor: \"green\" }}\n      ></View>\n      <View\n        style={{ width: \"60%\", height: \"100%\", backgroundColor: \"blue\" }}\n      ></View>\n      <View style={{ position: \"absolute\", marginTop: 20 }}>\n        <Button title=\"CONTROL DIRECTORY\" onPress={makeOffer} />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    // alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"row\"\n  }\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}