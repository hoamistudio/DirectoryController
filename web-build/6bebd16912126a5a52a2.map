{"version":3,"sources":["/Users/hoang/Projects/DirectoryController/App.tsx","/Users/hoang/Projects/DirectoryController/web-build/register-service-worker.js"],"names":["Platform","OS","window","require","RTCPeerConnection","RTCIceCandidate","RTCSessionDescription","notify","MediaStream","MediaStreamTrack","title","message","alert","Alert","App","pc","useRef","socket","useEffect","current","iceServers","urls","console","log","SocketIOClient","on","peers","sdp","type","remoteDecription","setRemoteDescription","catch","error","candidate","iceCandidate","addIceCandidate","emit","busy","then","createAnswer","answer","style","styles","container","hidden","width","height","backgroundColor","position","marginTop","onPress","onicecandidate","event","createOffer","offer","setLocalDescription","StyleSheet","create","flex","justifyContent","flexDirection","navigator","addEventListener","serviceWorker","register","scope","info"],"mappings":"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","file":"static/js/app.871cee5a.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Platform,\n  Alert,\n  Button,\n  StatusBar\n} from \"react-native\";\nimport SocketIOClient from \"socket.io-client\";\nconst {\n  RTCPeerConnection,\n  RTCIceCandidate,\n  RTCSessionDescription,\n  MediaStream,\n  MediaStreamTrack\n} = Platform.OS === \"web\" ? window : require(\"react-native-webrtc\");\n\nconst notify = (title: string, message?: string) => {\n  if (Platform.OS === \"web\") {\n    alert(title);\n  } else {\n    Alert.alert(title);\n  }\n};\n\nexport default function App() {\n  let pc = useRef<RTCPeerConnection | null>(null);\n  let socket = useRef<SocketIOClient.Socket | null>(null);\n\n  const makeOffer = () => {\n    if (pc.current) {\n      console.log(\"make offer\");\n      pc.current.onicecandidate = event => {\n        console.log(\"on iceeeee\");\n        socket.current.emit(\"data\", event.candidate);\n      };\n      pc.current.createOffer().then(offer => {\n        console.log(\"offer: \", offer);\n        pc.current.setLocalDescription(offer).then(() => {\n          console.log(\"set local description: \", offer);\n          socket.current.emit(\"MAKE_OFFER\", offer);\n        });\n      });\n    } else {\n      notify(\"Can not connect to Directory, please connect to the same wifi\");\n    }\n  };\n\n  useEffect(() => {\n    pc.current = new RTCPeerConnection({\n      iceServers: [{ urls: \"stun:stun.services.mozilla.com\" }]\n    });\n    console.log(\"server: \", \"http://207.148.65.203:3000\");\n    socket.current = SocketIOClient(\"http://207.148.65.203:3000\");\n\n    socket.current.on(\"PEERS_LIST\", peers => {\n      console.log(\"list peers: \", peers);\n    });\n\n    socket.current.on(\"DIRECTORY_BUSY\", () => {\n      notify(\"Directory is currently in use\");\n    });\n\n    socket.current.on(\"data\", message => {\n      console.log(\"message\", message);\n      if (message.sdp) {\n        if (message.type === \"answer\") {\n          const remoteDecription = new RTCSessionDescription(message);\n          pc.current\n            .setRemoteDescription(remoteDecription)\n            .catch(error => console.error(error));\n        }\n      } else if (message.candidate) {\n        const iceCandidate = new RTCIceCandidate(RTCIceCandidate);\n        pc.current.addIceCandidate(iceCandidate);\n        console.log(\"browser added ice candidate: \", iceCandidate);\n      }\n    });\n\n    // if is directory\n    if (Platform.OS === \"android\") {\n      socket.current.emit(\"SET_DIRECTORY\", {\n        busy: false\n      });\n      socket.current.on(\"data\", message => {\n        // notify(JSON.stringify(message));\n        console.log(\"message\", message);\n        if (message.sdp) {\n          if (message.type === \"offer\") {\n            console.log(\"answer offer\");\n            const remoteDecription = new RTCSessionDescription(message);\n            pc.current\n              .setRemoteDescription(remoteDecription)\n              .then(() => {\n                pc.current.createAnswer().then(answer => {\n                  console.log(\"answer: \", answer);\n                  socket.current.emit(\"MAKE_ANSWER\", answer);\n                });\n              })\n              .catch(error => console.error(error));\n          }\n        } else if (message.candidate) {\n          const iceCandidate = new RTCIceCandidate(RTCIceCandidate);\n          pc.current.addIceCandidate(iceCandidate);\n          console.log(\"android added candidate: \", iceCandidate);\n        }\n      });\n    }\n\n    return () => {};\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <StatusBar hidden={true} />\n      <View\n        style={{ width: \"40%\", height: \"100%\", backgroundColor: \"green\" }}\n      ></View>\n      <View\n        style={{ width: \"60%\", height: \"100%\", backgroundColor: \"blue\" }}\n      ></View>\n      <View style={{ position: \"absolute\", marginTop: 20 }}>\n        <Button title=\"CONTROL DIRECTORY\" onPress={makeOffer} />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    // alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"row\"\n  }\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}